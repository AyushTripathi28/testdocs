=begin
#Oister API

#API for Oister.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Fund Performance
    # Retrieves the past performance of a specific fund.
    # @param question [String] Query about the fund&#39;s performance.
    # @param query_asker_role [String] Role of the entity asking the query.
    # @param fund_id [String] Unique identifier of the fund.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def chat_get(question, query_asker_role, fund_id, opts = {})
      chat_get_with_http_info(question, query_asker_role, fund_id, opts)
      nil
    end

    # Get Fund Performance
    # Retrieves the past performance of a specific fund.
    # @param question [String] Query about the fund&#39;s performance.
    # @param query_asker_role [String] Role of the entity asking the query.
    # @param fund_id [String] Unique identifier of the fund.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def chat_get_with_http_info(question, query_asker_role, fund_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.chat_get ...'
      end
      # verify the required parameter 'question' is set
      if @api_client.config.client_side_validation && question.nil?
        fail ArgumentError, "Missing the required parameter 'question' when calling DefaultApi.chat_get"
      end
      # verify the required parameter 'query_asker_role' is set
      if @api_client.config.client_side_validation && query_asker_role.nil?
        fail ArgumentError, "Missing the required parameter 'query_asker_role' when calling DefaultApi.chat_get"
      end
      # verify the required parameter 'fund_id' is set
      if @api_client.config.client_side_validation && fund_id.nil?
        fail ArgumentError, "Missing the required parameter 'fund_id' when calling DefaultApi.chat_get"
      end
      # resource path
      local_var_path = '/chat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'question'] = question
      query_params[:'query_asker_role'] = query_asker_role
      query_params[:'fund_id'] = fund_id

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.chat_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#chat_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Document
    # Uploads documents to a specific fund.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier of the fund.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<File>] :files 
    # @option opts [String] :access_controls 
    # @return [nil]
    def chat_put(action, fund_id, opts = {})
      chat_put_with_http_info(action, fund_id, opts)
      nil
    end

    # Upload Document
    # Uploads documents to a specific fund.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier of the fund.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<File>] :files 
    # @option opts [String] :access_controls 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def chat_put_with_http_info(action, fund_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.chat_put ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DefaultApi.chat_put"
      end
      # verify enum value
      allowable_values = ["upload_document"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'fund_id' is set
      if @api_client.config.client_side_validation && fund_id.nil?
        fail ArgumentError, "Missing the required parameter 'fund_id' when calling DefaultApi.chat_put"
      end
      # resource path
      local_var_path = '/chat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action'] = action
      query_params[:'fund_id'] = fund_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['files'] = @api_client.build_collection_param(opts[:'files'], :csv) if !opts[:'files'].nil?
      form_params['access_controls'] = opts[:'access_controls'] if !opts[:'access_controls'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.chat_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#chat_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Fund
    # Creates a new fund with a given ID.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier for the new fund.
    # @param base_url [String] Base URL for the fund.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_fund_put(action, fund_id, base_url, opts = {})
      create_fund_put_with_http_info(action, fund_id, base_url, opts)
      nil
    end

    # Create Fund
    # Creates a new fund with a given ID.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier for the new fund.
    # @param base_url [String] Base URL for the fund.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_fund_put_with_http_info(action, fund_id, base_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_fund_put ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DefaultApi.create_fund_put"
      end
      # verify enum value
      allowable_values = ["create_fund"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'fund_id' is set
      if @api_client.config.client_side_validation && fund_id.nil?
        fail ArgumentError, "Missing the required parameter 'fund_id' when calling DefaultApi.create_fund_put"
      end
      # verify the required parameter 'base_url' is set
      if @api_client.config.client_side_validation && base_url.nil?
        fail ArgumentError, "Missing the required parameter 'base_url' when calling DefaultApi.create_fund_put"
      end
      # resource path
      local_var_path = '/create_fund'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action'] = action
      query_params[:'fund_id'] = fund_id
      query_params[:'base_url'] = base_url

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_fund_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_fund_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Role
    # Assigns a role to a partner in a specific fund.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier of the fund.
    # @param partner_uid [String] Unique identifier of the partner.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_role_put(action, fund_id, partner_uid, opts = {})
      create_role_put_with_http_info(action, fund_id, partner_uid, opts)
      nil
    end

    # Create Role
    # Assigns a role to a partner in a specific fund.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier of the fund.
    # @param partner_uid [String] Unique identifier of the partner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_role_put_with_http_info(action, fund_id, partner_uid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_role_put ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DefaultApi.create_role_put"
      end
      # verify enum value
      allowable_values = ["create_role"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'fund_id' is set
      if @api_client.config.client_side_validation && fund_id.nil?
        fail ArgumentError, "Missing the required parameter 'fund_id' when calling DefaultApi.create_role_put"
      end
      # verify the required parameter 'partner_uid' is set
      if @api_client.config.client_side_validation && partner_uid.nil?
        fail ArgumentError, "Missing the required parameter 'partner_uid' when calling DefaultApi.create_role_put"
      end
      # resource path
      local_var_path = '/create_role'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action'] = action
      query_params[:'fund_id'] = fund_id
      query_params[:'partner_uid'] = partner_uid

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_role_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_role_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Access Control
    # Updates access control settings for a specific document.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier of the fund.
    # @param access_control [String] Access control entity to be updated.
    # @param update_type [String] Type of update to access control.
    # @param file_url [String] URL of the file for access control update.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_access_control_put(action, fund_id, access_control, update_type, file_url, opts = {})
      update_access_control_put_with_http_info(action, fund_id, access_control, update_type, file_url, opts)
      nil
    end

    # Update Access Control
    # Updates access control settings for a specific document.
    # @param action [String] Action type for the request.
    # @param fund_id [String] Unique identifier of the fund.
    # @param access_control [String] Access control entity to be updated.
    # @param update_type [String] Type of update to access control.
    # @param file_url [String] URL of the file for access control update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_access_control_put_with_http_info(action, fund_id, access_control, update_type, file_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_access_control_put ...'
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling DefaultApi.update_access_control_put"
      end
      # verify enum value
      allowable_values = ["update_access_control"]
      if @api_client.config.client_side_validation && !allowable_values.include?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'fund_id' is set
      if @api_client.config.client_side_validation && fund_id.nil?
        fail ArgumentError, "Missing the required parameter 'fund_id' when calling DefaultApi.update_access_control_put"
      end
      # verify the required parameter 'access_control' is set
      if @api_client.config.client_side_validation && access_control.nil?
        fail ArgumentError, "Missing the required parameter 'access_control' when calling DefaultApi.update_access_control_put"
      end
      # verify the required parameter 'update_type' is set
      if @api_client.config.client_side_validation && update_type.nil?
        fail ArgumentError, "Missing the required parameter 'update_type' when calling DefaultApi.update_access_control_put"
      end
      # verify enum value
      allowable_values = ["addition", "removal"]
      if @api_client.config.client_side_validation && !allowable_values.include?(update_type)
        fail ArgumentError, "invalid value for \"update_type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'file_url' is set
      if @api_client.config.client_side_validation && file_url.nil?
        fail ArgumentError, "Missing the required parameter 'file_url' when calling DefaultApi.update_access_control_put"
      end
      # resource path
      local_var_path = '/update_access_control'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action'] = action
      query_params[:'fund_id'] = fund_id
      query_params[:'access_control'] = access_control
      query_params[:'update_type'] = update_type
      query_params[:'file_url'] = file_url

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_access_control_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_access_control_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
